package dao;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table city_list.
 */
public class CityItem {

    private Long id;
    private Integer cityType;
    private String cityName;
    private Double lat;
    private Double lng;
    private Float ownedDefaultLevel;
    private Float newDefaultLevel;
    private Float rentDefaultLevel;
    private Integer hasWay;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient CityItemDao myDao;

    private List<BusinessItem> businessItemList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CityItem() {
    }

    public CityItem(Long id) {
        this.id = id;
    }

    public CityItem(Long id, Integer cityType, String cityName, Double lat, Double lng, Float ownedDefaultLevel, Float newDefaultLevel, Float rentDefaultLevel, Integer hasWay) {
        this.id = id;
        this.cityType = cityType;
        this.cityName = cityName;
        this.lat = lat;
        this.lng = lng;
        this.ownedDefaultLevel = ownedDefaultLevel;
        this.newDefaultLevel = newDefaultLevel;
        this.rentDefaultLevel = rentDefaultLevel;
        this.hasWay = hasWay;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCityItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getCityType() {
        return cityType;
    }

    public void setCityType(Integer cityType) {
        this.cityType = cityType;
    }

    public String getCityName() {
        return cityName;
    }

    public void setCityName(String cityName) {
        this.cityName = cityName;
    }

    public Double getLat() {
        return lat;
    }

    public void setLat(Double lat) {
        this.lat = lat;
    }

    public Double getLng() {
        return lng;
    }

    public void setLng(Double lng) {
        this.lng = lng;
    }

    public Float getOwnedDefaultLevel() {
        return ownedDefaultLevel;
    }

    public void setOwnedDefaultLevel(Float ownedDefaultLevel) {
        this.ownedDefaultLevel = ownedDefaultLevel;
    }

    public Float getNewDefaultLevel() {
        return newDefaultLevel;
    }

    public void setNewDefaultLevel(Float newDefaultLevel) {
        this.newDefaultLevel = newDefaultLevel;
    }

    public Float getRentDefaultLevel() {
        return rentDefaultLevel;
    }

    public void setRentDefaultLevel(Float rentDefaultLevel) {
        this.rentDefaultLevel = rentDefaultLevel;
    }

    public Integer getHasWay() {
        return hasWay;
    }

    public void setHasWay(Integer hasWay) {
        this.hasWay = hasWay;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<BusinessItem> getBusinessItemList() {
        if (businessItemList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BusinessItemDao targetDao = daoSession.getBusinessItemDao();
            List<BusinessItem> businessItemListNew = targetDao._queryCityItem_BusinessItemList(id);
            synchronized (this) {
                if (businessItemList == null) {
                    businessItemList = businessItemListNew;
                }
            }
        }
        return businessItemList;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetBusinessItemList() {
        businessItemList = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public void setBusinessItemList(List<BusinessItem> businessItemList) {
        this.businessItemList = businessItemList;
    }

    /**
     * 持有化数据到数据库
     */
   /* public static synchronized void insert(List<CityModel> cityList) {
        LFDBManager.getIns().getCityItemDao().deleteAll();
        LFDBManager.getIns().getBusinessItemDao().deleteAll();
        for (CityModel model : cityList) {
            CityItem cityItem = new CityItem();
            cityItem.setId((long) model.getCityId());
            cityItem.setCityType(model.getCityType());
            cityItem.setCityName(model.getCityName());
            cityItem.setHasWay(model.getHasSubway());
            cityItem.setLat(model.getDefaultCenter().getLat());
            cityItem.setLng(model.getDefaultCenter().getLon());
            cityItem.setOwnedDefaultLevel(model.getDefaultOwnedHouseLevel());
            cityItem.setNewDefaultLevel(model.getDefaultNewHouseLevel());
            cityItem.setRentDefaultLevel(model.getDefaultRentHouseLevel());
            long cityId = LFDBManager.getIns().getCityItemDao().insert(cityItem);

            List<BusinessItem> supBusinessList = new ArrayList<>();
            for (BusinessModel item : model.getSupportBizList()) {
                BusinessItem business = new BusinessItem();
                business.setCityId(cityId);
                business.setBusinessId(item.getBusinessId());
                business.setBusinessName(item.getBusinessName());
                supBusinessList.add(business);
                LFDBManager.getIns().getBusinessItemDao().insert(business);
            }
            cityItem.setBusinessItemList(supBusinessList);
        }
    }

    *//**
     * 查询数据库
     *
     * @return
     *//*
    public static synchronized List<CityModel> query() {
        List<CityModel> cityList = new ArrayList<>();

        //查询数据库
        List<CityItem> itemList = LFDBManager.getIns().getCityItemDao().queryBuilder().build().list();
        for (CityItem item : itemList) {
            CityModel model = new CityModel();
            model.setCityId(item.getId().intValue());
            model.setCityType(item.getCityType());
            model.setCityName(item.getCityName());
            model.setDefaultCenter(new Coordinate(item.getLat(), item.getLng()));
            model.setHasSubway(item.getHasWay());
            model.setDefaultOwnedHouseLevel(item.getOwnedDefaultLevel());
            model.setDefaultNewHouseLevel(item.getNewDefaultLevel());
            model.setDefaultRentHouseLevel(item.getRentDefaultLevel());
            List<BusinessModel> businessList = new ArrayList<>();
            for (BusinessItem businessItem : item.getBusinessItemList()) {
                BusinessModel business = new BusinessModel();
                business.setBusinessId(businessItem.getBusinessId());
                business.setBusinessName(businessItem.getBusinessName());
                businessList.add(business);
            }
            model.setSupportBizList(businessList);
            cityList.add(model);
        }
        return cityList;
    }*/
    // KEEP METHODS END

}
