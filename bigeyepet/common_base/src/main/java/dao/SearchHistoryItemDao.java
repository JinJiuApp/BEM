package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table SEARCH_HISTORY_ITEM.
 */
public class SearchHistoryItemDao extends AbstractDao<SearchHistoryItem, Long> {

    public static final String TABLENAME = "SEARCH_HISTORY_ITEM";

    /**
     * Properties of entity SearchHistoryItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property City_id = new Property(1, Integer.class, "city_id", false, "CITY_ID");
        public final static Property Plate_id = new Property(2, Integer.class, "plate_id", false, "PLATE_ID");
        public final static Property Type = new Property(3, Integer.class, "type", false, "TYPE");
        public final static Property ShowId = new Property(4, Integer.class, "showId", false, "SHOW_ID");
        public final static Property BizType = new Property(5, Integer.class, "bizType", false, "BIZ_TYPE");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Sub_title = new Property(7, String.class, "sub_title", false, "SUB_TITLE");
        public final static Property Lat = new Property(8, Double.class, "lat", false, "LAT");
        public final static Property Lon = new Property(9, Double.class, "lon", false, "LON");
        public final static Property Level = new Property(10, Float.class, "level", false, "LEVEL");
        public final static Property SearchType = new Property(11, Integer.class, "searchType", false, "SEARCH_TYPE");
    }

    ;


    public SearchHistoryItemDao(DaoConfig config) {
        super(config);
    }

    public SearchHistoryItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'SEARCH_HISTORY_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CITY_ID' INTEGER," + // 1: city_id
                "'PLATE_ID' INTEGER," + // 2: plate_id
                "'TYPE' INTEGER," + // 3: type
                "'SHOW_ID' INTEGER," + // 4: showId
                "'BIZ_TYPE' INTEGER," + // 5: bizType
                "'TITLE' TEXT," + // 6: title
                "'SUB_TITLE' TEXT," + // 7: sub_title
                "'LAT' REAL," + // 8: lat
                "'LON' REAL," + // 9: lon
                "'LEVEL' REAL," + // 10: level
                "'SEARCH_TYPE' INTEGER);"); // 11: searchType
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SEARCH_HISTORY_ITEM'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, SearchHistoryItem entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer city_id = entity.getCity_id();
        if (city_id != null) {
            stmt.bindLong(2, city_id);
        }

        Integer plate_id = entity.getPlate_id();
        if (plate_id != null) {
            stmt.bindLong(3, plate_id);
        }

        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(4, type);
        }

        Integer showId = entity.getShowId();
        if (showId != null) {
            stmt.bindLong(5, showId);
        }

        Integer bizType = entity.getBizType();
        if (bizType != null) {
            stmt.bindLong(6, bizType);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }

        String sub_title = entity.getSub_title();
        if (sub_title != null) {
            stmt.bindString(8, sub_title);
        }

        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(9, lat);
        }

        Double lon = entity.getLon();
        if (lon != null) {
            stmt.bindDouble(10, lon);
        }

        Float level = entity.getLevel();
        if (level != null) {
            stmt.bindDouble(11, level);
        }

        Integer searchType = entity.getSearchType();
        if (searchType != null) {
            stmt.bindLong(12, searchType);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public SearchHistoryItem readEntity(Cursor cursor, int offset) {
        SearchHistoryItem entity = new SearchHistoryItem( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // city_id
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // plate_id
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // type
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // showId
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // bizType
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sub_title
                cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // lat
                cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // lon
                cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // level
                cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // searchType
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, SearchHistoryItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCity_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPlate_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setShowId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBizType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSub_title(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLat(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setLon(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setLevel(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setSearchType(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(SearchHistoryItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(SearchHistoryItem entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
