package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table bottom_bar.
*/
public class BottomBarItemDao extends AbstractDao<BottomBarItem, Long> {

    public static final String TABLENAME = "bottom_bar";

    /**
     * Properties of entity BottomBarItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property MouseOutIcon = new Property(2, String.class, "mouseOutIcon", false, "MOUSE_OUT_ICON");
        public final static Property MouseOnIcon = new Property(3, String.class, "mouseOnIcon", false, "MOUSE_ON_ICON");
        public final static Property MouseOutColor = new Property(4, String.class, "mouseOutColor", false, "MOUSE_OUT_COLOR");
        public final static Property MouseOnColor = new Property(5, String.class, "mouseOnColor", false, "MOUSE_ON_COLOR");
    };


    public BottomBarItemDao(DaoConfig config) {
        super(config);
    }
    
    public BottomBarItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'bottom_bar' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'MOUSE_OUT_ICON' TEXT," + // 2: mouseOutIcon
                "'MOUSE_ON_ICON' TEXT," + // 3: mouseOnIcon
                "'MOUSE_OUT_COLOR' TEXT," + // 4: mouseOutColor
                "'MOUSE_ON_COLOR' TEXT);"); // 5: mouseOnColor
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'bottom_bar'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BottomBarItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String mouseOutIcon = entity.getMouseOutIcon();
        if (mouseOutIcon != null) {
            stmt.bindString(3, mouseOutIcon);
        }
 
        String mouseOnIcon = entity.getMouseOnIcon();
        if (mouseOnIcon != null) {
            stmt.bindString(4, mouseOnIcon);
        }
 
        String mouseOutColor = entity.getMouseOutColor();
        if (mouseOutColor != null) {
            stmt.bindString(5, mouseOutColor);
        }
 
        String mouseOnColor = entity.getMouseOnColor();
        if (mouseOnColor != null) {
            stmt.bindString(6, mouseOnColor);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BottomBarItem readEntity(Cursor cursor, int offset) {
        BottomBarItem entity = new BottomBarItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mouseOutIcon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mouseOnIcon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mouseOutColor
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // mouseOnColor
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BottomBarItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMouseOutIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMouseOnIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMouseOutColor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMouseOnColor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BottomBarItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BottomBarItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
