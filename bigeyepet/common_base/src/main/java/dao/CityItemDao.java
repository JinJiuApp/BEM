package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table city_list.
*/
public class CityItemDao extends AbstractDao<CityItem, Long> {

    public static final String TABLENAME = "city_list";

    /**
     * Properties of entity CityItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CityType = new Property(1, Integer.class, "cityType", false, "CITY_TYPE");
        public final static Property CityName = new Property(2, String.class, "cityName", false, "CITY_NAME");
        public final static Property Lat = new Property(3, Double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(4, Double.class, "lng", false, "LNG");
        public final static Property OwnedDefaultLevel = new Property(5, Float.class, "ownedDefaultLevel", false, "OWNED_DEFAULT_LEVEL");
        public final static Property NewDefaultLevel = new Property(6, Float.class, "newDefaultLevel", false, "NEW_DEFAULT_LEVEL");
        public final static Property RentDefaultLevel = new Property(7, Float.class, "rentDefaultLevel", false, "RENT_DEFAULT_LEVEL");
        public final static Property HasWay = new Property(8, Integer.class, "hasWay", false, "HAS_WAY");
    };

    private DaoSession daoSession;


    public CityItemDao(DaoConfig config) {
        super(config);
    }
    
    public CityItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'city_list' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CITY_TYPE' INTEGER," + // 1: cityType
                "'CITY_NAME' TEXT," + // 2: cityName
                "'LAT' REAL," + // 3: lat
                "'LNG' REAL," + // 4: lng
                "'OWNED_DEFAULT_LEVEL' REAL," + // 5: ownedDefaultLevel
                "'NEW_DEFAULT_LEVEL' REAL," + // 6: newDefaultLevel
                "'RENT_DEFAULT_LEVEL' REAL," + // 7: rentDefaultLevel
                "'HAS_WAY' INTEGER);"); // 8: hasWay
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'city_list'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CityItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cityType = entity.getCityType();
        if (cityType != null) {
            stmt.bindLong(2, cityType);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(3, cityName);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(4, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(5, lng);
        }
 
        Float ownedDefaultLevel = entity.getOwnedDefaultLevel();
        if (ownedDefaultLevel != null) {
            stmt.bindDouble(6, ownedDefaultLevel);
        }
 
        Float newDefaultLevel = entity.getNewDefaultLevel();
        if (newDefaultLevel != null) {
            stmt.bindDouble(7, newDefaultLevel);
        }
 
        Float rentDefaultLevel = entity.getRentDefaultLevel();
        if (rentDefaultLevel != null) {
            stmt.bindDouble(8, rentDefaultLevel);
        }
 
        Integer hasWay = entity.getHasWay();
        if (hasWay != null) {
            stmt.bindLong(9, hasWay);
        }
    }

    @Override
    protected void attachEntity(CityItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CityItem readEntity(Cursor cursor, int offset) {
        CityItem entity = new CityItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // cityType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cityName
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // lat
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // lng
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // ownedDefaultLevel
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // newDefaultLevel
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // rentDefaultLevel
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // hasWay
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CityItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCityType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCityName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLat(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLng(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setOwnedDefaultLevel(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setNewDefaultLevel(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setRentDefaultLevel(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setHasWay(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CityItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CityItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
