package dao;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table business_list.
 */
public class BusinessItem {

    private Long id;
    private Integer businessId;
    private String businessName;
    private Long cityId;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient BusinessItemDao myDao;

    private CityItem cityItem;
    private Long cityItem__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BusinessItem() {
    }

    public BusinessItem(Long id) {
        this.id = id;
    }

    public BusinessItem(Long id, Integer businessId, String businessName, Long cityId) {
        this.id = id;
        this.businessId = businessId;
        this.businessName = businessName;
        this.cityId = cityId;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBusinessItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getBusinessId() {
        return businessId;
    }

    public void setBusinessId(Integer businessId) {
        this.businessId = businessId;
    }

    public String getBusinessName() {
        return businessName;
    }

    public void setBusinessName(String businessName) {
        this.businessName = businessName;
    }

    public Long getCityId() {
        return cityId;
    }

    public void setCityId(Long cityId) {
        this.cityId = cityId;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public CityItem getCityItem() {
        Long __key = this.cityId;
        if (cityItem__resolvedKey == null || !cityItem__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CityItemDao targetDao = daoSession.getCityItemDao();
            CityItem cityItemNew = targetDao.load(__key);
            synchronized (this) {
                cityItem = cityItemNew;
                cityItem__resolvedKey = __key;
            }
        }
        return cityItem;
    }

    public void setCityItem(CityItem cityItem) {
        synchronized (this) {
            this.cityItem = cityItem;
            cityId = cityItem == null ? null : cityItem.getId();
            cityItem__resolvedKey = cityId;
        }
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
